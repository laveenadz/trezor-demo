'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _constants = require('./constants');

var _deferred = require('./utils/deferred');

var _messages = require('./types/messages');

var MessageTypes = _interopRequireWildcard(_messages);

var _responses = require('./types/responses');

var ResponseTypes = _interopRequireWildcard(_responses);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var workerWrapper = function workerWrapper(factory) {
    if (typeof factory === 'function') return new factory();
    if (typeof factory === 'string' && typeof Worker !== 'undefined') return new Worker(factory);
    // use custom worker
    throw new Error('Cannot use worker');
};

// initialize worker communication, raise error if worker not found


var initWorker = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(settings) {
        var dfd, worker;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        dfd = (0, _deferred.create)(-1);
                        worker = workerWrapper(settings.worker);

                        worker.onmessage = function (message) {
                            if (message.data.type !== _constants.MESSAGES.HANDSHAKE) return;
                            delete settings.worker;
                            worker.postMessage({
                                type: _constants.MESSAGES.HANDSHAKE,
                                settings: settings
                            });
                            dfd.resolve(worker);
                        };

                        worker.onerror = function (error) {
                            worker.onmessage = null;
                            worker.onerror = null;
                            var msg = error.message ? 'Worker runtime error: Line ' + error.lineno + ' in ' + error.filename + ': ' + error.message : 'Worker handshake error';
                            dfd.reject(new Error(msg));
                        };

                        return _context.abrupt('return', dfd.promise);

                    case 5:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function initWorker(_x) {
        return _ref.apply(this, arguments);
    };
}();

var BlockchainLink = function (_EventEmitter) {
    (0, _inherits3.default)(BlockchainLink, _EventEmitter);

    function BlockchainLink(settings) {
        var _this2 = this;

        (0, _classCallCheck3.default)(this, BlockchainLink);

        var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));

        _this.messageId = 0;
        _this.deferred = [];

        _this.__send = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(message) {
                var dfd;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return _this.getWorker();

                            case 2:
                                dfd = (0, _deferred.create)(_this.messageId);

                                _this.deferred.push(dfd);
                                _this.worker.postMessage((0, _extends3.default)({ id: _this.messageId }, message));
                                _this.messageId++;
                                return _context2.abrupt('return', dfd.promise);

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this2);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }();

        _this.onMessage = function (event) {
            if (!event.data) return;
            var data = event.data;


            if (data.id === -1) {
                _this.onEvent(event);
                return;
            }

            var dfd = _this.deferred.find(function (d) {
                return d.id === data.id;
            });
            if (!dfd) {
                console.warn('Message with id ' + data.id + ' not found');
                return;
            }
            if (data.type === _constants.RESPONSES.ERROR) {
                dfd.reject(new Error(data.payload));
            } else {
                dfd.resolve(data.payload);
            }
            _this.deferred = _this.deferred.filter(function (d) {
                return d !== dfd;
            });
        };

        _this.onEvent = function (event) {
            if (!event.data) return;
            var data = event.data;


            if (data.type === _constants.RESPONSES.CONNECTED) {
                _this.emit('connected');
            } else if (data.type === _constants.RESPONSES.DISCONNECTED) {
                _this.emit('disconnected');
            } else if (data.type === _constants.RESPONSES.ERROR) {
                _this.emit('error', data.payload);
            } else if (data.type === _constants.RESPONSES.NOTIFICATION) {
                _this.emit(data.payload.type, data.payload.payload);
            }
        };

        _this.onNotification = function (notification) {
            _this.emit(notification.type, notification.payload);
        };

        _this.onError = function (error) {
            var message = error.message ? 'Worker runtime error: Line ' + error.lineno + ' in ' + error.filename + ': ' + error.message : 'Worker handshake error';
            var e = new Error(message);
            // reject all pending responses
            _this.deferred.forEach(function (d) {
                d.reject(e);
            });
            _this.deferred = [];
        };

        _this.settings = settings;
        return _this;
    }

    BlockchainLink.prototype.getWorker = function () {
        var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            if (this.worker) {
                                _context3.next = 6;
                                break;
                            }

                            _context3.next = 3;
                            return initWorker(this.settings);

                        case 3:
                            this.worker = _context3.sent;

                            // $FlowIssue MessageEvent type
                            this.worker.onmessage = this.onMessage.bind(this);
                            // $FlowIssue ErrorEvent type
                            this.worker.onerror = this.onError.bind(this);

                        case 6:
                            return _context3.abrupt('return', this.worker);

                        case 7:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, this);
        }));

        function getWorker() {
            return _ref3.apply(this, arguments);
        }

        return getWorker;
    }();

    // Sending messages to worker


    BlockchainLink.prototype.connect = function () {
        var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            _context4.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.CONNECT
                            });

                        case 2:
                            return _context4.abrupt('return', _context4.sent);

                        case 3:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, this);
        }));

        function connect() {
            return _ref4.apply(this, arguments);
        }

        return connect;
    }();

    BlockchainLink.prototype.getInfo = function () {
        var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.GET_INFO
                            });

                        case 2:
                            return _context5.abrupt('return', _context5.sent);

                        case 3:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        function getInfo() {
            return _ref5.apply(this, arguments);
        }

        return getInfo;
    }();

    BlockchainLink.prototype.getAccountInfo = function () {
        var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(payload) {
            return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            _context6.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.GET_ACCOUNT_INFO,
                                payload: payload
                            });

                        case 2:
                            return _context6.abrupt('return', _context6.sent);

                        case 3:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, this);
        }));

        function getAccountInfo(_x3) {
            return _ref6.apply(this, arguments);
        }

        return getAccountInfo;
    }();

    BlockchainLink.prototype.estimateFee = function () {
        var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(payload) {
            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            _context7.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.ESTIMATE_FEE,
                                payload: payload
                            });

                        case 2:
                            return _context7.abrupt('return', _context7.sent);

                        case 3:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, this);
        }));

        function estimateFee(_x4) {
            return _ref7.apply(this, arguments);
        }

        return estimateFee;
    }();

    BlockchainLink.prototype.subscribe = function () {
        var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(payload) {
            return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            _context8.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.SUBSCRIBE,
                                payload: payload
                            });

                        case 2:
                            return _context8.abrupt('return', _context8.sent);

                        case 3:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, this);
        }));

        function subscribe(_x5) {
            return _ref8.apply(this, arguments);
        }

        return subscribe;
    }();

    BlockchainLink.prototype.unsubscribe = function () {
        var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(payload) {
            return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            _context9.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.UNSUBSCRIBE,
                                payload: payload
                            });

                        case 2:
                            return _context9.abrupt('return', _context9.sent);

                        case 3:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, this);
        }));

        function unsubscribe(_x6) {
            return _ref9.apply(this, arguments);
        }

        return unsubscribe;
    }();

    BlockchainLink.prototype.pushTransaction = function () {
        var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(payload) {
            return _regenerator2.default.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            _context10.next = 2;
                            return this.__send({
                                type: _constants.MESSAGES.PUSH_TRANSACTION,
                                payload: payload
                            });

                        case 2:
                            return _context10.abrupt('return', _context10.sent);

                        case 3:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, this);
        }));

        function pushTransaction(_x7) {
            return _ref10.apply(this, arguments);
        }

        return pushTransaction;
    }();

    BlockchainLink.prototype.disconnect = function () {
        var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
            return _regenerator2.default.wrap(function _callee11$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            if (this.worker) {
                                _context11.next = 2;
                                break;
                            }

                            return _context11.abrupt('return', true);

                        case 2:
                            _context11.next = 4;
                            return this.__send({
                                type: _constants.MESSAGES.DISCONNECT
                            });

                        case 4:
                            return _context11.abrupt('return', _context11.sent);

                        case 5:
                        case 'end':
                            return _context11.stop();
                    }
                }
            }, _callee11, this);
        }));

        function disconnect() {
            return _ref11.apply(this, arguments);
        }

        return disconnect;
    }();

    // worker messages handler

    BlockchainLink.prototype.dispose = function dispose() {
        if (this.worker) {
            this.worker.terminate();
            delete this.worker;
        }
    };

    return BlockchainLink;
}(_events2.default);

exports.default = BlockchainLink;