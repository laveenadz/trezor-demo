'use strict';

exports.__esModule = true;
exports.clearSubscriptions = exports.removeSubscription = exports.getSubscription = exports.addSubscription = exports.removeAddresses = exports.getAddresses = exports.addAddresses = exports.response = exports.errorHandler = exports.handshake = exports.debug = exports.getSettings = exports.setSettings = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _settings = void 0;

var _debugPrefix = void 0;
var _addresses = [];
var _subscription = {};

var setSettings = exports.setSettings = function setSettings(s) {
    _settings = s;
    _debugPrefix = '[Worker "' + s.name + '"]:';
};

var getSettings = exports.getSettings = function getSettings() {
    return _settings;
};

var debug = exports.debug = function debug() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (_settings && _settings.debug) {
        if (args[0] === 'warn' || args[0] === 'error') {
            var _console;

            (_console = console)[args[0]].apply(_console, [_debugPrefix].concat(args.slice(1)));
        } else {
            var _console2;

            (_console2 = console).log.apply(_console2, [_debugPrefix].concat(args));
        }
    }
};

var handshake = exports.handshake = function handshake() {
    postMessage({
        id: -1,
        type: _constants.MESSAGES.HANDSHAKE
    });
};

var errorHandler = exports.errorHandler = function errorHandler(_ref) {
    var id = _ref.id,
        error = _ref.error;

    var message = '';
    if (typeof error === 'string') {
        message = error;
    } else if ((typeof error === 'undefined' ? 'undefined' : (0, _typeof3.default)(error)) === 'object') {
        var keys = Object.keys(error);
        if (keys.indexOf('name') >= 0) {
            message = error.name;
        } else {
            message = error.message;
        }
    }

    postMessage({
        id: id,
        type: _constants.RESPONSES.ERROR,
        payload: message
    });
};

var response = exports.response = function response(data) {
    postMessage(data);
};

var getUniqueInput = function getUniqueInput(addresses) {
    if (!Array.isArray(addresses)) return [];
    var seen = {};
    return addresses.filter(function (a) {
        if (typeof a !== 'string') return false;
        return seen.hasOwnProperty(a) ? false : seen[a] = true;
    });
};

var addAddresses = exports.addAddresses = function addAddresses(addresses) {
    var unique = getUniqueInput(addresses).filter(function (a) {
        return _addresses.indexOf(a) < 0;
    });
    _addresses = _addresses.concat(unique);
    return unique;
};

var getAddresses = exports.getAddresses = function getAddresses() {
    return _addresses;
};

var removeAddresses = exports.removeAddresses = function removeAddresses(addresses) {
    var unique = getUniqueInput(addresses);
    _addresses = _addresses.filter(function (a) {
        return unique.indexOf(a) < 0;
    });
    return _addresses;
};

var addSubscription = exports.addSubscription = function addSubscription(type) {
    _subscription[type] = true;
};

var getSubscription = exports.getSubscription = function getSubscription(type) {
    return _subscription[type];
};

var removeSubscription = exports.removeSubscription = function removeSubscription(type) {
    delete _subscription[type];
};

var clearSubscriptions = exports.clearSubscriptions = function clearSubscriptions() {
    Object.keys(_subscription).forEach(function (key) {
        return _subscription[key] = false;
    });
};