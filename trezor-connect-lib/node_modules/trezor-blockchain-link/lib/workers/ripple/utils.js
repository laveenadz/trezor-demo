'use strict';

exports.__esModule = true;
exports.transformTransactionEvent = exports.transformTransactionHistory = exports.concatTransactions = undefined;

var _bignumber = require('bignumber.js');

var _bignumber2 = _interopRequireDefault(_bignumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var concatTransactions = exports.concatTransactions = function concatTransactions(txs, newTxs) {
    if (newTxs.length < 1) return txs;
    var unique = newTxs.filter(function (tx) {
        return txs.indexOf(tx) < 0;
    });
    return txs.concat(unique);
};

var transformTransactionHistory = exports.transformTransactionHistory = function transformTransactionHistory(descriptor, raw) {
    var tx = raw.tx;


    if (tx.TransactionType !== 'Payment') {
        // https://github.com/ripple/ripple-lib/blob/develop/docs/index.md#transaction-types
        console.warn("Transform tx type:", tx.TransactionType, tx);
    }

    var type = tx.Account === descriptor ? 'send' : 'recv';
    var hash = tx.hash;
    var amount = tx.Amount;
    var fee = tx.Fee;
    var total = new _bignumber2.default(amount).plus(fee).toString();

    return {
        type: type,
        timestamp: tx.date,

        descriptor: descriptor,
        inputs: [{ addresses: [tx.Account] }],
        outputs: [{ addresses: [tx.Destination] }],

        hash: hash,
        amount: amount,
        fee: fee,
        total: total,

        blockHeight: tx.ledger_index,
        blockHash: tx.ledger_hash
    };
};

var transformTransactionEvent = exports.transformTransactionEvent = function transformTransactionEvent(descriptor, event) {
    var tx = event.transaction;
    var isPayment = tx.TransactionType === 'Payment';
    var type = tx.Account === descriptor ? 'send' : 'recv';
    var hash = tx.hash;
    var amount = tx.Amount;
    var fee = tx.Fee;
    var total = isPayment ? new _bignumber2.default(amount).plus(fee).toString() : '0';
    var tokens = !isPayment ? [{ name: tx.TransactionType, shortcut: '', value: '0' }] : undefined;

    return {
        type: type,
        timestamp: tx.date,
        descriptor: descriptor,
        inputs: [{ addresses: [tx.Account] }],
        outputs: [{ addresses: [tx.Destination] }],

        hash: hash,
        amount: amount,
        fee: fee,
        total: total,
        tokens: tokens,

        blockHeight: event.ledger_index,
        blockHash: event.ledger_hash
    };
};